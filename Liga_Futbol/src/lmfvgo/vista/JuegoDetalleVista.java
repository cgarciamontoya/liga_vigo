/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lmfvgo.vista;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import lmfvgo.db.JuegosDAO;
import lmfvgo.db.JugadoresDAO;
import lmfvgo.excepciones.LMFVGOException;
import lmfvgo.modelo.Juegos;

/**
 *
 * @author USUARIO
 */
public class JuegoDetalleVista extends FormBase {
    private static final long serialVersionUID = -1163107632122936758L;

    private final JuegosDAO juegosDAO;
    private final Juegos juego;
    private final JugadoresDAO jugadoresDAO;
    private JComboBox cboAlineacion;
    private JComboBox cboTA;
    private JComboBox cboTR;
    private JComboBox cboGoles;
    
    /**
     * Creates new form JuegoDetalleVista
     * @param juego
     */
    public JuegoDetalleVista(Juegos juego) {
        initComponents();
        juegosDAO = new JuegosDAO();
        jugadoresDAO = new JugadoresDAO();
        this.juego = juego;
        btnCedula.setEnabled(false);
        iniciarCombos();
        cargarModelosTable(tblLocal);
        cargarModelosTable(tblVisitante);
        cargarDatosJuego();
    }
    
    private void iniciarCombos() {
        cboAlineacion = new JComboBox();
        cboAlineacion.addItem("No Jugó");
        cboAlineacion.addItem("Inicia");
        cboAlineacion.addItem("Cambio");
        
        cboTA = new JComboBox();
        cboTA.addItem(0);
        cboTA.addItem(1);
        cboTA.addItem(2);
        
        cboTR = new JComboBox();
        cboTR.addItem(0);
        cboTR.addItem(1);
        
        cboGoles = new JComboBox();
        for (int i = 0; i <= 10; i++) {
            cboGoles.addItem(i);
        }
    }
    
    private void cargarDatosJuego() {
        setTitle("Jornada " + juego.getJornada() + ": " + juego.getLocalNombre() + " vs " + juego.getVisitanteNombre());
        lblLocal.setText(juego.getLocalNombre());
        lblVisitante.setText(juego.getVisitanteNombre());
        
        if (juego.getFecha() != null && juego.getHora() != null && !juego.getHora().isEmpty()
                && juego.getLugar() != null && !juego.getLugar().isEmpty()) {
            txtFecha.setText(new SimpleDateFormat("dd/MM/yyyy").format(juego.getFecha()));
            txtHora.setText(juego.getHora());
            txtLugar.setText(juego.getLugar());
            btnCedula.setEnabled(true);
            btnActualizar.setEnabled(false);
            btnLimpiar.setEnabled(false);
            txtFecha.setEnabled(false);
            txtHora.setEnabled(false);
            txtLugar.setEnabled(false);
            btnActualizar.setEnabled(false);
        }
        
        limpiarTabla(tblLocal);
        DefaultTableModel local = (DefaultTableModel) tblLocal.getModel();
        List<String> jLocal = jugadoresDAO.consultaJugadoresEquipo(juego.getLocal());
        
        for (String jl : jLocal) {
            local.addRow(new Object[]{jl, "No Jugó", 0, 0, 0});
        }
        
        limpiarTabla(tblVisitante);
        DefaultTableModel visitante = (DefaultTableModel) tblVisitante.getModel();
        List<String> jVisitante = jugadoresDAO.consultaJugadoresEquipo(juego.getVisitante());
        
        for (String jv : jVisitante) {
            visitante.addRow(new Object[]{jv, "No Jugó", 0, 0, 0});
        }
    }
    
    private void cargarModelosTable(JTable tabla) {
        tabla.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(cboAlineacion));
        tabla.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(cboTA));
        tabla.getColumnModel().getColumn(3).setCellEditor(new DefaultCellEditor(cboTR));
        tabla.getColumnModel().getColumn(4).setCellEditor(new DefaultCellEditor(cboGoles));
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtLugar = new javax.swing.JTextField();
        btnLimpiar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblLocal = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblVisitante = new javax.swing.JTable();
        lblLocal = new javax.swing.JLabel();
        lblVisitante = new javax.swing.JLabel();
        btnCedula = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtHora = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();

        setClosable(true);
        setPreferredSize(new java.awt.Dimension(1150, 550));

        jLabel1.setText("Fecha:");

        txtFecha.setToolTipText("Formato: dd/MM/yyyy Ejemplo: 05/09/2017");

        jLabel2.setText("Lugar:");

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiar(evt);
            }
        });

        btnActualizar.setText("Actualizar");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarJuego(evt);
            }
        });

        tblLocal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Alinea", "A", "R", "G"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblLocal);
        if (tblLocal.getColumnModel().getColumnCount() > 0) {
            tblLocal.getColumnModel().getColumn(0).setPreferredWidth(110);
            tblLocal.getColumnModel().getColumn(1).setResizable(false);
            tblLocal.getColumnModel().getColumn(1).setPreferredWidth(10);
            tblLocal.getColumnModel().getColumn(2).setResizable(false);
            tblLocal.getColumnModel().getColumn(2).setPreferredWidth(5);
            tblLocal.getColumnModel().getColumn(3).setResizable(false);
            tblLocal.getColumnModel().getColumn(3).setPreferredWidth(5);
            tblLocal.getColumnModel().getColumn(4).setResizable(false);
            tblLocal.getColumnModel().getColumn(4).setPreferredWidth(5);
        }

        tblVisitante.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Alinea", "A", "R", "G"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblVisitante.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tblVisitante);
        if (tblVisitante.getColumnModel().getColumnCount() > 0) {
            tblVisitante.getColumnModel().getColumn(0).setPreferredWidth(110);
            tblVisitante.getColumnModel().getColumn(1).setResizable(false);
            tblVisitante.getColumnModel().getColumn(1).setPreferredWidth(10);
            tblVisitante.getColumnModel().getColumn(2).setResizable(false);
            tblVisitante.getColumnModel().getColumn(2).setPreferredWidth(5);
            tblVisitante.getColumnModel().getColumn(3).setResizable(false);
            tblVisitante.getColumnModel().getColumn(3).setPreferredWidth(5);
            tblVisitante.getColumnModel().getColumn(4).setResizable(false);
            tblVisitante.getColumnModel().getColumn(4).setPreferredWidth(5);
        }

        lblLocal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblLocal.setText("jLabel3");

        lblVisitante.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblVisitante.setText("jLabel3");

        btnCedula.setText("Cédula");
        btnCedula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarCedula(evt);
            }
        });

        jLabel3.setText("Hora");

        txtHora.setToolTipText("Formato: HH:mm Ejemplo: 10:00");

        btnGuardar.setText("Guardar Estadisticas");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarEstadisticas(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtLugar, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCedula)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnActualizar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnLimpiar))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(lblLocal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
                            .addComponent(lblVisitante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, 0)
                        .addComponent(btnGuardar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtLugar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLimpiar)
                    .addComponent(btnActualizar)
                    .addComponent(btnCedula))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblVisitante)
                    .addComponent(lblLocal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 367, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGuardar)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void limpiar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiar
        txtFecha.setText(null);
        txtHora.setText(null);
        txtLugar.setText(null);
        btnCedula.setEnabled(false);
    }//GEN-LAST:event_limpiar

    private void actualizarJuego(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarJuego
        if (validarDatos()) {
            try {
                juegosDAO.actualizarDatosJornadaJuego(juego);
                btnCedula.setEnabled(true);
                txtFecha.setEnabled(false);
                txtHora.setEnabled(false);
                txtLugar.setEnabled(false);
                btnLimpiar.setEnabled(false);
                btnActualizar.setEnabled(false);
            } catch (LMFVGOException ex) {
                agregarMensajeError(ex.getMessage());
            }
        }
    }//GEN-LAST:event_actualizarJuego

    private boolean validarDatos() {
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
        if (txtFecha.getText() == null) {
            agregarMensajeAdvertencia("La fecha es requerida");
            return false;
        }
        try {
            juego.setFecha(sdf.parse(txtFecha.getText()));
        } catch (ParseException ex) {
            agregarMensajeError("El formato de la fecha es incorrecto");
            return false;
        }
        if (txtHora.getText() == null) {
            agregarMensajeAdvertencia("La hora es requerida");
            return false;
        } 
        if (!txtHora.getText().contains(":")) {
            agregarMensajeAdvertencia("El formato de la hora es incorrecto");
            return false;
        } 
        String[] hora = txtHora.getText().split(":");
        try {
            if (Integer.parseInt(hora[0]) < 13 && Integer.parseInt(hora[1]) < 60) {
                juego.setHora(txtHora.getText());
            } else {
                agregarMensajeError("El valor de la hora es incorrecta");
                return false;
            }
            
        } catch (NumberFormatException ex) {
            agregarMensajeError("El contenido del valor de la hora debe ser numérico");
            return false;
        }
        if (txtLugar.getText() == null || txtLugar.getText().trim().isEmpty()) {
            agregarMensajeAdvertencia("El lugar es requerido");
            return false;
        }
        juego.setLugar(txtLugar.getText());
        return true;
    }
    private void generarCedula(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarCedula
        // TODO add your handling code here:
    }//GEN-LAST:event_generarCedula

    private void guardarEstadisticas(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarEstadisticas
        // TODO add your handling code here:
    }//GEN-LAST:event_guardarEstadisticas


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnCedula;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblLocal;
    private javax.swing.JLabel lblVisitante;
    private javax.swing.JTable tblLocal;
    private javax.swing.JTable tblVisitante;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtHora;
    private javax.swing.JTextField txtLugar;
    // End of variables declaration//GEN-END:variables
}
