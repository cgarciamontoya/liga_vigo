/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lmfvgo.vista;

import java.sql.Connection;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import lmfvgo.db.SancionesDAO;
import lmfvgo.excepciones.LMFVGOException;
import lmfvgo.modelo.Amonestado;
import lmfvgo.util.ReportesManager;

/**
 *
 * @author desarrollo
 */
public class SancionesAmonestadosVista extends FormBase {

    private static final long serialVersionUID = 3951600544747416214L;
    private final SancionesDAO sancionesDAO;
    private final ReportesManager reportesManager;
    private List<Amonestado> amonestados;

    /**
     * Creates new form SancionesAmonestadosConsulta
     * @param con
     */
    public SancionesAmonestadosVista(Connection con) {
        initComponents();
        sancionesDAO = new SancionesDAO(con);
        reportesManager = new ReportesManager(con);
        btnExportar.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cboFuerza = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblAmonestados = new javax.swing.JTable();
        btnLimpiar = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        btnExportar = new javax.swing.JButton();

        setClosable(true);
        setTitle("CONSULTA AMONESTADOS");

        jLabel1.setText("Fuerza:");

        cboFuerza.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "Primera", "Segunda" }));

        tblAmonestados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Jugador", "Equipo", "Fuerza", "Total", "Observaciones"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAmonestados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                quitarAmonestacion(evt);
            }
        });
        jScrollPane1.setViewportView(tblAmonestados);

        btnLimpiar.setText("Limpiar");
        btnLimpiar.setToolTipText("");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiar(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscar(evt);
            }
        });

        btnExportar.setText("Exportar");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportar(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 961, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cboFuerza, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(btnBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExportar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLimpiar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cboFuerza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLimpiar)
                    .addComponent(btnBuscar)
                    .addComponent(btnExportar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void limpiar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiar
        limpiarTabla(tblAmonestados);
        cboFuerza.setSelectedIndex(0);
        btnExportar.setEnabled(false);
        amonestados = null;
    }//GEN-LAST:event_limpiar

    private void exportar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportar
        if (amonestados != null && !amonestados.isEmpty()) {
            try {
                reportesManager.amonestados(amonestados);
            } catch (LMFVGOException ex) {
                agregarMensajeError("No se generó el reporte debido a: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_exportar

    private void buscar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscar
        limpiarTabla(tblAmonestados);
        amonestados = sancionesDAO.consultaAmonestados(cboFuerza.getSelectedIndex());
        if (amonestados != null && !amonestados.isEmpty()) {
            DefaultTableModel model = (DefaultTableModel) tblAmonestados.getModel();
            for (Amonestado a : amonestados) {
                model.addRow(new Object[]{(a.getIdJugador() + " - " + a.getNombreJugador()),
                (a.getIdEquipo() + " - " + a.getNombreEquipo()),
                (a.getFuerza() == 1 ? "Primera" : "Segunda"),
                a.getTotalTarjetas(),
                null});
            }
            btnExportar.setEnabled(true);
        }
    }//GEN-LAST:event_buscar

    private void quitarAmonestacion(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quitarAmonestacion
        if (SwingUtilities.isRightMouseButton(evt)) {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Desea quitar la amonestación del jugador?", "Advertencia", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.YES_OPTION) {
                if (tblAmonestados.getSelectedRow() >= 0 && tblAmonestados.getSelectedRowCount() == 1) {
                    Integer idJugador = Integer.parseInt(String.valueOf(tblAmonestados.getValueAt(tblAmonestados.getSelectedRow(), 0)).split(" - ")[0]);
                    String observaciones = String.valueOf(tblAmonestados.getValueAt(tblAmonestados.getSelectedRow(), 4));
                    if (observaciones == null || observaciones.isEmpty()) {
                        agregarMensajeAdvertencia("Debe capturar las observaciones");
                        return;
                    }
                    sancionesDAO.quitarAmonestacion(idJugador, observaciones);
                    ((DefaultTableModel) tblAmonestados.getModel()).removeRow(tblAmonestados.getSelectedRow());
                    agregarMensajeExito("La amonestacion fue eliminada correctamente");
                } else {
                    agregarMensajeAdvertencia("Debe seleccionar solamente un registro");
                }
            }
        }
    }//GEN-LAST:event_quitarAmonestacion


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JComboBox<String> cboFuerza;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblAmonestados;
    // End of variables declaration//GEN-END:variables
}
