/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package lmfvgo.vista;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.table.DefaultTableModel;
import lmfvgo.db.EquiposDAO;
import lmfvgo.db.JuegosDAO;
import lmfvgo.db.TorneoDAO;
import lmfvgo.excepciones.LMFVGOException;
import lmfvgo.modelo.Equipos;
import lmfvgo.modelo.Juegos;
import lmfvgo.modelo.Torneo;
import lmfvgo.reportes.vo.RolVO;
import lmfvgo.util.ConstantesUtil;
import lmfvgo.util.GeneradorRolJuegos;
import lmfvgo.util.ReportesManager;

/**
 *
 * @author cgarcia
 */
public class JuegosRolVista extends FormBase {
    private static final long serialVersionUID = 6782224013793706214L;

    private final EquiposDAO equiposDAO;
    private final TorneoDAO torneoDAO;
    private final JuegosDAO juegosDAO;
    private Map<Integer, List<Juegos>> rol = null;
    private final ReportesManager reportesManager;
    
    /** Creates new form JuegosRolVista
     * @param con */
    public JuegosRolVista(Connection con) {
        initComponents();
        equiposDAO = new EquiposDAO(con);
        torneoDAO = new TorneoDAO(con);
        juegosDAO = new JuegosDAO(con);
        reportesManager = new ReportesManager(con);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cboFuerza = new javax.swing.JComboBox<>();
        btnGenerar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRol = new javax.swing.JTable();
        btnLimpiar = new javax.swing.JButton();
        btnGuardar = new javax.swing.JButton();
        bnExportar = new javax.swing.JButton();

        setClosable(true);
        setTitle("Rol de Juegos");

        jLabel1.setText("Fuerza");

        cboFuerza.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "Primera", "Segunda" }));
        cboFuerza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarRol(evt);
            }
        });

        btnGenerar.setText("Generar");
        btnGenerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarRol(evt);
            }
        });

        tblRol.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Local", "Visitante"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblRol);

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiar(evt);
            }
        });

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarRol(evt);
            }
        });

        bnExportar.setText("Exportar PDF");
        bnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportar(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cboFuerza, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGenerar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bnExportar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimpiar)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cboFuerza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGenerar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLimpiar)
                    .addComponent(btnGuardar)
                    .addComponent(bnExportar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generarRol(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarRol
        int idFuerza = cboFuerza.getSelectedIndex();
        if (idFuerza == 0) {
            agregarMensajeAdvertencia("Debe seleccionar la fuerza");
            return;
        }
        List<Equipos> equipos = equiposDAO.consultarEquipoRol(idFuerza);
        if (equipos == null || equipos.isEmpty()) {
            agregarMensajeError("No existen equipos registrados");
            return;
        }
        if ((equipos.size() % 2) > 0) {
            equipos.add(equiposDAO.getEquipoDescansa(idFuerza));
            
        }
        Torneo torneo = torneoDAO.torneoActivo();
        switch (equipos.size()) {
            case 10 :
                rol = GeneradorRolJuegos.generarRol10(equipos, torneo.getIdTorneo());
                break;
            case 12 :
                rol = GeneradorRolJuegos.generarRol12(equipos, torneo.getIdTorneo());
                break;
            case 14 :
                rol = GeneradorRolJuegos.generarRol14(equipos, torneo.getIdTorneo());
                break;
            case 16 :
                rol = GeneradorRolJuegos.generarRol16(equipos, torneo.getIdTorneo());
                break;
            default :
                agregarMensajeError("No se puede generar el rol para un torneo de menos de 10 equipos o mayor de 16");
                return;
        }
        limpiarTabla(tblRol);
        llenarRol();
        
    }//GEN-LAST:event_generarRol

    private void llenarRol() {
        DefaultTableModel modelo = (DefaultTableModel) tblRol.getModel();
        int jornada = 1;
        int totalJornadas = juegosDAO.getTotalJornadas(cboFuerza.getSelectedIndex());
        while (jornada <= totalJornadas) {
            List<Juegos> juegos = rol.get(jornada);
            String jornadaTitulo = "";
            switch (jornada) {
                case ConstantesUtil.JORNADA_CUARTOS :
                    jornadaTitulo = "CUARTOS DE FINAL";
                    break;
                case ConstantesUtil.JORNADA_SEMIS : 
                    jornadaTitulo = "SEMIFINAL";
                    break;
                case ConstantesUtil.JORNADA_FINAL:
                    jornadaTitulo = "FINAL";
                    break;
                default:
                    jornadaTitulo = String.valueOf(jornada);
            }
            modelo.addRow(new Object[]{("Jornada " + jornadaTitulo), ""});
            int jgoDesc = -1;
            for (int i = 0; i < juegos.size(); i++) {
                Juegos juego = juegos.get(i);
                if (!juego.getLocalNombre().equalsIgnoreCase("DESCANSA") &&
                        !juego.getVisitanteNombre().equalsIgnoreCase("DESCANSA")) {
                    modelo.addRow(new Object[]{juego.getLocalNombre(), juego.getVisitanteNombre()});
                } else {
                    jgoDesc = i;
                }
            }
            if (jgoDesc >= 0) {
                Juegos juego = juegos.get(jgoDesc);
                if (juego.getLocalNombre().equalsIgnoreCase("DESCANSA")) {
                    modelo.addRow(new Object[]{juego.getLocalNombre(), juego.getVisitanteNombre()});
                } else {
                    modelo.addRow(new Object[]{juego.getVisitanteNombre(), juego.getLocalNombre()});
                }
            }
            jornada++;
        }
    }
    private void limpiar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiar
        limpiarTabla(tblRol);
        cboFuerza.setSelectedIndex(0);
        btnGenerar.setEnabled(true);
        btnGuardar.setEnabled(true);
    }//GEN-LAST:event_limpiar

    private void guardarRol(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarRol
        if (rol == null || rol.isEmpty()) {
            agregarMensajeAdvertencia("No se ha generado el rol");
            return;
        }
        if (cboFuerza.getSelectedIndex() == 0) {
            agregarMensajeAdvertencia("No se seleccióno la fuerza");
        }
        try {
            juegosDAO.guardarRol(rol, cboFuerza.getSelectedIndex());
            agregarMensajeExito("El rol de guardó correctamente");
        } catch (LMFVGOException ex) {
            agregarMensajeError(ex.getMessage());
        }
    }//GEN-LAST:event_guardarRol

    private void cargarRol(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarRol
        limpiarTabla(tblRol);
        if (cboFuerza.getSelectedIndex() > 0) {
            rol = juegosDAO.consultarRol(cboFuerza.getSelectedIndex());
            if (rol != null && !rol.isEmpty()) {
                llenarRol();
                btnGenerar.setEnabled(false);
                btnGuardar.setEnabled(false);
            } else {
                btnGenerar.setEnabled(true);
                btnGuardar.setEnabled(true);
            }
        } else {
            btnGenerar.setEnabled(true);
            btnGuardar.setEnabled(true);
        }
    }//GEN-LAST:event_cargarRol

    private void exportar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportar
        if (tblRol.getRowCount() > 0) {
            List<RolVO> reporte = new ArrayList<>();
            DefaultTableModel model = (DefaultTableModel) tblRol.getModel();
            String jornada = "";
            for (int i = 0; i < model.getRowCount(); i++) {
                RolVO juego = new RolVO();
                if (model.getValueAt(i, 0).toString().toLowerCase().startsWith("jornada")) {
                    String[] datos = model.getValueAt(i, 0).toString().split(" ");
                    jornada = datos[1];
                    if (datos.length > 2) {
                        for (int idx = 2; idx < datos.length; idx++) {
                            jornada += " " + datos[idx];
                        }
                    }
                    
                    continue;
                }
                juego.setJornada(jornada);
                juego.setLocal(model.getValueAt(i, 0).toString());
                juego.setVisitante(model.getValueAt(i, 1).toString());
                reporte.add(juego);
            }
            try {
                reportesManager.rol(reporte, cboFuerza.getSelectedIndex());
            } catch (LMFVGOException ex) {
                agregarMensajeError(ex.getMessage());
            }
        } else {
            agregarMensajeAdvertencia("Debe seleccionar el rol para exportar");
        }
        
    }//GEN-LAST:event_exportar


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bnExportar;
    private javax.swing.JButton btnGenerar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JComboBox<String> cboFuerza;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblRol;
    // End of variables declaration//GEN-END:variables

}
